// Decompiled with JetBrains decompiler
// Type: ns35.Class656
// Assembly: WW.Cad, Version=4.0.37.140, Culture=neutral, PublicKeyToken=null
// MVID: E8E0F2D4-1D21-41F0-9953-8161CF39F2BE
// Assembly location: C:\Users\MSN99\Desktop\Cleaned\WW.Cad.dll

namespace ns35
{
  internal abstract class Class656
  {
    public static readonly Class656 class656_0 = (Class656) new Class656.Class657();
    public static readonly Class656 class656_1 = (Class656) new Class656.Class658();

    public static ulong smethod_0(ulong seed, uint dataLength)
    {
      seed = (ulong) (((long) seed + (long) dataLength) * 214013L + 2531011L);
      seed |= (ulong) ((long) seed * 919178835918848L + 10870609470816256L);
      seed = ~seed;
      return seed;
    }

    public static ulong smethod_1(ulong seed, uint dataLength)
    {
      seed = (ulong) (((long) seed + (long) dataLength) * 214013L + 2531011L);
      seed = (ulong) ((long) seed * 4295181309L + ((long) dataLength + 2531011L));
      seed = ~seed;
      return seed;
    }

    public unsafe ulong method_0(byte[] data, uint offset, uint length, ulong crc)
    {
      fixed (byte* dataPtr = data)
        return this.method_1(dataPtr, offset, length, crc);
    }

    public unsafe ulong method_1(byte* dataPtr, uint offset, uint length, ulong crc)
    {
      byte* dataPtr1 = dataPtr + (int) offset;
      uint num1 = length >> 3;
      while (num1-- != 0U)
      {
        this.method_2(dataPtr1 + 6, ref crc);
        this.method_2(dataPtr1 + 4, ref crc);
        this.method_2(dataPtr1 + 2, ref crc);
        this.method_2(dataPtr1, ref crc);
        dataPtr1 += 8;
      }
      uint num2 = length & 7U;
      if (num2 > 0U)
      {
        switch (num2)
        {
          case 1:
            this.vmethod_0(*dataPtr1, ref crc);
            break;
          case 2:
            this.method_2(dataPtr1, ref crc);
            break;
          case 3:
            this.method_2(dataPtr1, ref crc);
            this.vmethod_0(dataPtr1[2], ref crc);
            break;
          case 4:
            this.method_2(dataPtr1 + 2, ref crc);
            this.method_2(dataPtr1, ref crc);
            break;
          case 5:
            this.method_2(dataPtr1 + 2, ref crc);
            this.method_2(dataPtr1, ref crc);
            this.vmethod_0(dataPtr1[4], ref crc);
            break;
          case 6:
            this.method_2(dataPtr1 + 2, ref crc);
            this.method_2(dataPtr1, ref crc);
            this.method_2(dataPtr1 + 4, ref crc);
            break;
          case 7:
            this.method_2(dataPtr1 + 2, ref crc);
            this.method_2(dataPtr1, ref crc);
            this.method_2(dataPtr1 + 4, ref crc);
            this.vmethod_0(dataPtr1[6], ref crc);
            break;
        }
      }
      return this.vmethod_1(crc);
    }

    protected abstract void vmethod_0(byte data, ref ulong crc);

    protected abstract ulong vmethod_1(ulong crc);

    private unsafe void method_2(byte* dataPtr, ref ulong crc)
    {
      this.vmethod_0(*dataPtr, ref crc);
      this.vmethod_0(dataPtr[1], ref crc);
    }

    private class Class657 : Class656
    {
      private static readonly ulong[] ulong_0 = new ulong[256]{ 0UL, 4823603603198064275UL, 9647207206396128550UL, 14344283933443513269UL, 5274672035359026399UL, 847670339082705484UL, 14759040976900489721UL, 10241823793177474922UL, 10549344070718052798UL, 15030250704074698541UL, 1695340678165410968UL, 6158653484774949387UL, 15804726273676621153UL, 11071337880091427826UL, 6824194888265062471UL, 2036903512645398228UL, 7367177604490692079UL, 2651944067726553980UL, 16419204125234161865UL, 11613757334439845466UL, 3390681356330821936UL, 7926053118503640995UL, 12317306969549898774UL, 16726154088988619397UL, 17607865585094646865UL, 13162708473643690690UL, 8194994013375312247UL, 3695931686473304036UL, 13648389776530124942UL, 18417527692557321757UL, 4073807025290796456UL, 8825348881154370363UL, 14734355208981384158UL, 10271039580541631821UL, 5303888135453107960UL, 822984195088142443UL, 9604374506261047041UL, 14391664176758772114UL, 47380625301539367UL, 4780770595170139316UL, 6781362712661643872UL, 2084283301222999283UL, 15852106237007281990UL, 11028505464239851989UL, 1670654249350217407UL, 6187869865390245932UL, 10578560694269006745UL, 15005564104267687178UL, 12269926345859042865UL, 16768987096479742114UL, 3433514057002836759UL, 7878672873577829764UL, 16389988026750624494UL, 11638443477897467005UL, 7391863372946608072UL, 2622728278751721819UL, 4044590402276644751UL, 8850035479350698268UL, 13673076206955870889UL, 18388311311405091898UL, 8147614050581592912UL, 3738764100714335683UL, 17650697762308740726UL, 13115328684529279205UL, 15709965168302367023UL, 11021966344253216700UL, 6909860770376862729UL, 2095335087373712026UL, 10607776270906215920UL, 15115916238825782115UL, 1645968390176284886UL, 6063892853452478021UL, 5216239979862816913UL, 762004938812542466UL, 14808413130408695223UL, 10336584279807992612UL, 94761250603078734UL, 4872975272980325085UL, 9561541190340278632UL, 14285852213486374907UL, 13562725425323287744UL, 18359094313119879763UL, 4168566602445998566UL, 8874722219015798645UL, 17657238303940757535UL, 13257468400305012364UL, 8136561383943382329UL, 3610266854770152362UL, 3341308498700434814UL, 7831293060043656173UL, 12375739730780491864UL, 16811819059476047563UL, 7452841817450123681UL, 2710377314828461874UL, 16324444680414493831UL, 11564384134825822740UL, 1621282580641819377UL, 6093108618008534114UL, 10636992411005044695UL, 15091230119249932612UL, 6867028114005673518UL, 2142715359940571325UL, 15757345747155659528UL, 10979133309658045851UL, 9518708972583580495UL, 14333231979791697372UL, 142141253402664553UL, 4830142882085382394UL, 14783726745893216144UL, 10365800689136969987UL, 5245456557503443638UL, 737318311902463013UL, 8089180804553289502UL, 3653099890976004493UL, 17700070958701396536UL, 13210088128275084459UL, 4139350461810230209UL, 8899408340202190162UL, 13587411233247080167UL, 18329878549100632180UL, 16295228101163185824UL, 11589070762272702515UL, 7477528201428671366UL, 2681160907110034709UL, 12328359726370364031UL, 16854651450907929836UL, 3384140715920324441UL, 7783913295349006794UL, 17796789492404876493UL, 12973186262895182430UL, 8294265019745835499UL, 3597188614796881784UL, 13819721540753725458UL, 18246723593521770113UL, 4190670174747424052UL, 8707887697765516199UL, 7249714899603402099UL, 2768808468102880224UL, 16248400991498780757UL, 11785088403942012614UL, 3291936780352569772UL, 8025325358597240639UL, 12127785706904956042UL, 16915077318774037017UL, 10432479959725633826UL, 15147713122803500977UL, 1524009877625084932UL, 6329456346323069591UL, 15705454305770282493UL, 11170082187107838830UL, 6635271944638132443UL, 2226424485906433608UL, 189522501206157468UL, 4634679410803088911UL, 9745950545960650170UL, 14245012653811987241UL, 5445476407655580739UL, 676338306971005648UL, 14876502445374089573UL, 10124960353263198198UL, 4215391513593610003UL, 8678706776937023872UL, 13790540925671641653UL, 18271444552530207910UL, 8337133204891997132UL, 3549843186494580063UL, 17749444438031597290UL, 13016054137459951737UL, 12170653315997410989UL, 16867732534171963454UL, 3244592164593781643UL, 8068192726900473112UL, 16273122767886764658UL, 11755906975779290337UL, 7220533709540304724UL, 2793530071884239303UL, 6682616997400869628UL, 2183556611878603887UL, 15662586120087312346UL, 11217427617020813641UL, 1553190491096487459UL, 6304735387851432112UL, 10407758620342516485UL, 15176894045242543510UL, 14905683634900247362UL, 10100238751092381137UL, 5420754629656923748UL, 705519735670536439UL, 9793295161182637981UL, 14202145287119436046UL, 146654890503152315UL, 4682024195942093864UL, 3242565161283638754UL, 7930564333232481137UL, 12186217236017068228UL, 17000743249723264599UL, 7335380351123765565UL, 2827240748300537774UL, 16153640314560107547UL, 11735716164790313608UL, 13734056228011347036UL, 18188291445129067215UL, 4285430719881142650UL, 8757259798139230185UL, 17846161249714921603UL, 13067947420601767440UL, 8235833358291897765UL, 3511522545606540086UL, 5387043107155988493UL, 590673871457609374UL, 14925875833148783915UL, 10219719885873843128UL, 284282506805329106UL, 4684052045342640705UL, 9660285764170764788UL, 14186579979835500391UL, 15610694155489642931UL, 11120709418076880672UL, 6720936860919424149UL, 2284857304564388358UL, 10490913115006887276UL, 15233377424362361855UL, 1474636623804926026UL, 6234696958930763481UL, 16178361609106579004UL, 11706535215248140463UL, 7306199781952008986UL, 2851961734412043657UL, 12229085463316509411UL, 16953397843693241456UL, 3195220067441434565UL, 7973432182840617302UL, 8278700923620460418UL, 3464177731752866065UL, 17798816680404380324UL, 13110814815472245815UL, 4310152537884486493UL, 8728078392784608718UL, 13704874997943502459UL, 18213013024491712744UL, 9707630858549910483UL, 14143712128616820032UL, 241414281116563189UL, 4731397450835853414UL, 14955056402857342732UL, 10194998898151653791UL, 5362321814220069418UL, 619854820462849209UL, 1503817855483314797UL, 6209975379031176446UL, 10466191297540353867UL, 15262558828106308056UL, 6768281431840648882UL, 2241989909157107745UL, 15567826590698013588UL, 11168054230320002311UL };

      protected override void vmethod_0(byte data, ref ulong crc)
      {
        crc = Class656.Class657.ulong_0[checked ((ulong) (((long) data ^ unchecked ((long) (crc >> 56))) & (long) byte.MaxValue))] ^ crc << 8;
      }

      protected override ulong vmethod_1(ulong crc)
      {
        return ~crc;
      }
    }

    private class Class658 : Class656
    {
      private static readonly ulong[] ulong_0 = new ulong[256]{ 0UL, 8851949072701294969UL, 17703898145402589938UL, 10333669153493130123UL, 13851072938616403599UL, 13465927519055396854UL, 3857338458010461309UL, 5715195658523061508UL, 12333367839138578037UL, 15127763206205961996UL, 6816212484437830791UL, 2612226237385041406UL, 7714676916020922618UL, 1281407202545942915UL, 11430391317046123016UL, 16463076249205199729UL, 9009731685717012353UL, 563108230357313272UL, 9851657908567506291UL, 17465080730062222346UL, 13632424968875661582UL, 14404880506683019383UL, 5224452474770082812UL, 3627802401766982277UL, 15429353832041845236UL, 12463821128841762957UL, 2562814405091885830UL, 6433535930597116543UL, 1592294032496338811UL, 7836410910743637506UL, 16404387395731993993UL, 11056451039949864176UL, 18019463371434024706UL, 9280105458721969787UL, 1126216460714626544UL, 8464919223366468745UL, 4190910634541279629UL, 4679640014836523252UL, 14959263154764675967UL, 13060872525739979270UL, 5852729821509460343UL, 3161916214005835790UL, 11856275032257016709UL, 16019730051968187132UL, 10448904949540165624UL, 16994763621833383553UL, 7255604803533964554UL, 2191395843288271987UL, 9734813498046853251UL, 18285020776702097914UL, 8262382231073956465UL, 608425843627928328UL, 5125628810183771660UL, 4465764294926438261UL, 12867071861194233086UL, 14432195567501024647UL, 3184588064992677622UL, 6262709589572306831UL, 15672821821487275012UL, 11770576130456212861UL, 17008134862606432377UL, 10867599606483677440UL, 1853769023980628619UL, 7161174014982448114UL, 16103423924954344815UL, 11935289383220651030UL, 3083341959784644509UL, 5769757520242456292UL, 2252432921429253088UL, 7321251034957484697UL, 16929838446732937490UL, 10388307452745547883UL, 8381821269082559258UL, 1047727658635319907UL, 9359280029673046504UL, 18102965619612993681UL, 13000435797616977301UL, 14894146905688698092UL, 4745161141923116903UL, 4252033715651608094UL, 11705459643018920686UL, 15612384854998895511UL, 6323832428011671580UL, 3250108949404244325UL, 7082685524280996961UL, 1770671381070249240UL, 10951102161764411027UL, 17087309740654948330UL, 674072313427442843UL, 8323419547594995170UL, 18224423522563763817UL, 9669888565606754064UL, 14511209607067929108UL, 12950765422787986285UL, 4382791686576543974UL, 5047054248884015519UL, 2696289253709771373UL, 6895947823530343188UL, 15049839570318909599UL, 12250835051042597350UL, 16524764462147912930UL, 11496477575961038235UL, 1216851687255856656UL, 7654800921679748969UL, 10251257620367543320UL, 17625884659327141217UL, 8931528589852876522UL, 84259039178430355UL, 5655163293556783767UL, 3792978414742418414UL, 13532134484260726885UL, 13912670750543257884UL, 6369176129985355244UL, 2502782282785952917UL, 12525419179144613662UL, 15495561035627234919UL, 10978437246791527267UL, 16321975555527844378UL, 7920669638525335953UL, 1671873238255513832UL, 17531166746306175897UL, 9913345878835194592UL, 503231997654823275UL, 8945175932061546514UL, 3707538047961257238UL, 5308515798192249967UL, 14322348029964896228UL, 13554501644362141341UL, 10785157014839085493UL, 17254666630495879372UL, 6925536469308201799UL, 1928669229005230654UL, 6166683919569289018UL, 3408106242218915395UL, 11539515040484912584UL, 15779741191858611377UL, 4504865842858506176UL, 4925828954283753145UL, 14642502069914969394UL, 12820884771576065099UL, 18355716529793696079UL, 9540007361421969462UL, 796147016248169405UL, 8202193697865996996UL, 16763642538165118516UL, 10555343349626187597UL, 2095455317270639814UL, 7479631577382337983UL, 2926364910754730171UL, 5928137516128508354UL, 15937228569359352393UL, 12102324735718361904UL, 4867406749023426625UL, 4131191115536978232UL, 13131477498808912563UL, 14763945261529023434UL, 9490322283846233806UL, 17972763431062038455UL, 8504067431303216188UL, 926884511990314309UL, 8051711962477172407UL, 1541670979892322254UL, 11100683476643087429UL, 16201132341218348348UL, 12647664856023343160UL, 15374718365700663617UL, 6500217898808488650UL, 2372580570961558451UL, 14165371048561993922UL, 13712881572587659707UL, 3541342762140498480UL, 5475551080882205513UL, 337036156713721421UL, 9112211761281881908UL, 17374189211922025663UL, 10071726351451997638UL, 1348144626854885686UL, 7524919785159454799UL, 16646839095189990340UL, 11375251796044276413UL, 15171913658969673657UL, 12129609824107054784UL, 2827581646778391883UL, 6766067242130363442UL, 13374985906044110659UL, 14070668113165684282UL, 5489218623395763633UL, 3960334819262667976UL, 8765583373153087948UL, 251615998827411637UL, 10094108497768031038UL, 17783882574922426951UL, 5392578507419542746UL, 3462768234654100899UL, 13791895647060686376UL, 14249064643987996497UL, 10011129131143811669UL, 17309264314385947436UL, 9177858264896848039UL, 398073508124084702UL, 16284634862666717871UL, 11179858319785628630UL, 1463182455377365085UL, 7968614284679676196UL, 2433703374511713312UL, 6565738749404456281UL, 15309601843359497938UL, 12587227855704700843UL, 4025855981238586203UL, 5550341738321543714UL, 14010231419946703273UL, 13309869690798280912UL, 17863057179705753044UL, 10177610780853122221UL, 168518078356860710UL, 8687094605961012831UL, 11310326587113567534UL, 16586241563491499095UL, 7585956829484836828UL, 1413790823389195941UL, 6687492953022055329UL, 2744609311697881816UL, 12213303662187237715UL, 15250927976100943914UL, 12738352259970710488UL, 14564578711588090529UL, 5005564565571905834UL, 4588929132448424019UL, 8142317431333358935UL, 731591227688682542UL, 9606093343850471333UL, 18417404465172059868UL, 2012927990619293101UL, 7005115709973351636UL, 17176652871151048543UL, 10702745209522052646UL, 15841339277050671906UL, 11605722277885901403UL, 3343746476511027664UL, 6106651831093618857UL, 14830152191845028953UL, 13193075276920315168UL, 4071158715666679467UL, 4803046671925235666UL, 1006463995309646550UL, 8588326435575524271UL, 17890351864123093028UL, 9412308762883553629UL, 7415076095922514476UL, 2035579357833339733UL, 10617031596384499934UL, 16829728831969243559UL, 12024401134718426275UL, 15854695815076877786UL, 6012200567359213137UL, 3006100283679606568UL };

      protected override void vmethod_0(byte data, ref ulong crc)
      {
        crc = Class656.Class658.ulong_0[checked ((ulong) ((unchecked ((long) crc) ^ (long) data) & (long) byte.MaxValue))] ^ crc >> 8;
      }

      protected override ulong vmethod_1(ulong crc)
      {
        return crc;
      }
    }
  }
}
